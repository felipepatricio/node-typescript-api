"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const renderGraphiQL_1 = require("./renderGraphiQL");
function isOptionsFunction(arg) {
    return typeof arg === 'function';
}
async function resolveGraphiQLOptions(options, ...args) {
    if (isOptionsFunction(options)) {
        try {
            return await options(...args);
        }
        catch (e) {
            throw new Error(`Invalid options provided for GraphiQL: ${e.message}`);
        }
    }
    else {
        return options;
    }
}
function createGraphiQLParams(query) {
    const queryObject = query || {};
    return {
        query: queryObject.query || '',
        variables: queryObject.variables,
        operationName: queryObject.operationName || '',
    };
}
function createGraphiQLData(params, options) {
    return {
        endpointURL: options.endpointURL,
        subscriptionsEndpoint: options.subscriptionsEndpoint,
        query: params.query || options.query,
        variables: (params.variables && JSON.parse(params.variables)) || options.variables,
        operationName: params.operationName || options.operationName,
        passHeader: options.passHeader,
        editorTheme: options.editorTheme,
        websocketConnectionParams: options.websocketConnectionParams,
    };
}
async function resolveGraphiQLString(query = {}, options, ...args) {
    const graphiqlParams = createGraphiQLParams(query);
    const graphiqlOptions = await resolveGraphiQLOptions(options, ...args);
    const graphiqlData = createGraphiQLData(graphiqlParams, graphiqlOptions);
    return renderGraphiQL_1.renderGraphiQL(graphiqlData);
}
exports.resolveGraphiQLString = resolveGraphiQLString;
//# sourceMappingURL=resolveGraphiQLString.js.map