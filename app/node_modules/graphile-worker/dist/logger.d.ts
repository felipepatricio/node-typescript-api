export interface LogScope {
    label?: string;
    workerId?: string;
    taskIdentifier?: string;
    jobId?: string;
}
export interface LogMeta {
    [key: string]: unknown;
}
export declare enum LogLevel {
    ERROR = "error",
    WARNING = "warning",
    INFO = "info",
    DEBUG = "debug"
}
export interface LogFunction {
    (level: LogLevel, message: string, meta?: LogMeta): void;
}
export interface LogFunctionFactory {
    (scope: LogScope): LogFunction;
}
export declare class Logger {
    private _scope;
    private _logFactory;
    private log;
    constructor(logFactory: LogFunctionFactory, scope?: LogScope);
    scope(additionalScope: LogScope): Logger;
    error(message: string, meta?: LogMeta): void;
    warn(message: string, meta?: LogMeta): void;
    info(message: string, meta?: LogMeta): void;
    debug(message: string, meta?: LogMeta): void;
}
export declare const consoleLogFactory: (scope: LogScope) => (level: LogLevel, message: string) => void;
export declare const defaultLogger: Logger;
