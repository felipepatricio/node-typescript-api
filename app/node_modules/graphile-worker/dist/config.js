"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
const cosmiconfig_1 = require("cosmiconfig");
const cosmiconfigResult = cosmiconfig_1.cosmiconfigSync("graphile-worker").search();
const cosmiconfig = (_a = cosmiconfigResult) === null || _a === void 0 ? void 0 : _a.config;
exports.defaults = {
    schema: process.env.GRAPHILE_WORKER_SCHEMA ||
        enforceStringOrUndefined("schema", (_b = cosmiconfig) === null || _b === void 0 ? void 0 : _b.schema) ||
        "graphile_worker",
    maxContiguousErrors: enforceNumberOrUndefined("maxContiguousErrors", (_c = cosmiconfig) === null || _c === void 0 ? void 0 : _c.maxContiguousErrors) || 10,
    pollInterval: enforceNumberOrUndefined("pollInterval", (_d = cosmiconfig) === null || _d === void 0 ? void 0 : _d.pollInterval) || 2000,
    concurrentJobs: enforceNumberOrUndefined("concurrentJobs", (_e = cosmiconfig) === null || _e === void 0 ? void 0 : _e.concurrentJobs) ||
        1,
    maxPoolSize: enforceNumberOrUndefined("maxPoolSize", (_f = cosmiconfig) === null || _f === void 0 ? void 0 : _f.maxPoolSize) || 10,
};
function enforceStringOrUndefined(keyName, str) {
    if (typeof str === "string") {
        return str;
    }
    else if (!str) {
        return undefined;
    }
    else {
        throw new Error(`Expected '${keyName}' to be a string (or not set), but received ${typeof str}`);
    }
}
function enforceNumberOrUndefined(keyName, nr) {
    if (typeof nr === "number") {
        return nr;
    }
    else if (typeof nr === "string") {
        const val = parseFloat(nr);
        if (isFinite(val)) {
            return val;
        }
        else {
            throw new Error(`Expected '${keyName}' to be a number (or not set), but received ${nr}`);
        }
    }
    else if (!nr) {
        return undefined;
    }
    else {
        throw new Error(`Expected '${keyName}' to be a number (or not set), but received ${typeof nr}`);
    }
}
//# sourceMappingURL=config.js.map