const AbstractSyntaxTree = require('abstract-syntax-tree')
const { logicalExpressionReduction } = require('..')
const assert = require('assert')

var tree = new AbstractSyntaxTree('const foo = "bar" && "baz"')
tree.replace({ enter: logicalExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = "baz";\n')

var tree = new AbstractSyntaxTree('const foo = "bar" || "baz"')
tree.replace({ enter: logicalExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = "bar";\n')

var tree = new AbstractSyntaxTree('const foo = undefined || "foo"')
tree.replace({ enter: logicalExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = "foo";\n')

var tree = new AbstractSyntaxTree('const foo = null || "foo"')
tree.replace({ enter: logicalExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = "foo";\n')

var tree = new AbstractSyntaxTree('const foo = NaN || "foo"')
tree.replace({ enter: logicalExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = "foo";\n')

var tree = new AbstractSyntaxTree('const foo = Infinity || "foo"')
tree.replace({ enter: logicalExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = Infinity;\n')
