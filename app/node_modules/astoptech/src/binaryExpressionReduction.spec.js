const AbstractSyntaxTree = require('abstract-syntax-tree')
const { binaryExpressionReduction } = require('..')
const assert = require('assert')

var tree = new AbstractSyntaxTree('const foo = 2 + 2;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 4;\n')

var tree = new AbstractSyntaxTree('const foo = 2 - 2;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 0;\n')

var tree = new AbstractSyntaxTree('const foo = 2 * 2;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 4;\n')

var tree = new AbstractSyntaxTree('const foo = 2 / 2;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 1;\n')

var tree = new AbstractSyntaxTree('const foo = 5 % 2;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 1;\n')

var tree = new AbstractSyntaxTree('const foo = 2 ** 3;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 8;\n')

var tree = new AbstractSyntaxTree('const foo = 2 === 3;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = false;\n')

var tree = new AbstractSyntaxTree('const foo = 2 == "2";\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = true;\n')

var tree = new AbstractSyntaxTree('const foo = 2 !== 3;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = true;\n')

var tree = new AbstractSyntaxTree('const foo = 2 != "2";\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = false;\n')

var tree = new AbstractSyntaxTree('const foo = 2 > 3;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = false;\n')

var tree = new AbstractSyntaxTree('const foo = 2 < 3;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = true;\n')

var tree = new AbstractSyntaxTree('const foo = 2 >= 3;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = false;\n')

var tree = new AbstractSyntaxTree('const foo = 2 <= 3;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = true;\n')

var tree = new AbstractSyntaxTree('const foo = 7 & 1;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 1;\n')

var tree = new AbstractSyntaxTree('const foo = 7 | 1;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 7;\n')

var tree = new AbstractSyntaxTree('const foo = 7 ^ 1;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 6;\n')

var tree = new AbstractSyntaxTree('const foo = 7 << 1;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 14;\n')

var tree = new AbstractSyntaxTree('const foo = 7 >> 1;\n')
tree.replace({ enter: binaryExpressionReduction })
assert.deepStrictEqual(tree.source, 'const foo = 3;\n')
