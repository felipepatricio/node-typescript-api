const AbstractSyntaxTree = require('abstract-syntax-tree')
const { negationOperatorRemoval } = require('..')
const assert = require('assert')

var tree = new AbstractSyntaxTree('if (!(foo === bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo !== bar) {\n  console.log("foo");\n}\n')

var tree = new AbstractSyntaxTree('if (!(foo < bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo >= bar) {\n  console.log("foo");\n}\n')

var tree = new AbstractSyntaxTree('if (!(foo > bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo <= bar) {\n  console.log("foo");\n}\n')

var tree = new AbstractSyntaxTree('if (!(foo >= bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo < bar) {\n  console.log("foo");\n}\n')

var tree = new AbstractSyntaxTree('if (!(foo <= bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo > bar) {\n  console.log("foo");\n}\n')

var tree = new AbstractSyntaxTree('if (!(foo != bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo == bar) {\n  console.log("foo");\n}\n')

var tree = new AbstractSyntaxTree('if (!(foo !== bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo === bar) {\n  console.log("foo");\n}\n')

var tree = new AbstractSyntaxTree('if (!(foo == bar)) { console.log("foo") }\n')
tree.replace({ enter: negationOperatorRemoval })
assert.deepStrictEqual(tree.source, 'if (foo != bar) {\n  console.log("foo");\n}\n')
