"use strict";
/*
 * @poppinss/chokidar-ts
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default('tsc:builder');
/**
 * Exposes the API to build the project similar to `tsc` command.
 */
class Builder {
    constructor(ts, config, pluginManager) {
        this.ts = ts;
        this.config = config;
        this.pluginManager = pluginManager;
        debug('initiating builder');
    }
    /**
     * Build the project using the Typescript compiler API
     */
    build() {
        const { options, fileNames } = this.config;
        this.host = this.ts.createCompilerHost(options);
        this.program = this.ts.createProgram(fileNames, options, this.host);
        this.compilerOptions = options;
        debug('emitting program');
        const result = this.program.emit(undefined, this.ts.sys.writeFile, undefined, undefined, this.pluginManager.getTransformers(this.ts, options));
        const diagnostics = this.ts.getPreEmitDiagnostics(this.program).concat(result.diagnostics);
        debug('initial build has "%d" errors', diagnostics.length);
        return {
            skipped: result.emitSkipped,
            diagnostics,
        };
    }
}
exports.Builder = Builder;
