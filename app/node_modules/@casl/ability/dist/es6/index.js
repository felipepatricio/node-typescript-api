import sift from 'sift/sift.csp.min';

const getDefaultMessage = error => `Cannot execute "${error.action}" on "${error.subjectName}"`;

let defaultErrorMessage = getDefaultMessage;
class ForbiddenError extends Error {
  static setDefaultMessage(messageOrFn) {
    if (messageOrFn === null) {
      defaultErrorMessage = getDefaultMessage;
    } else {
      defaultErrorMessage = typeof messageOrFn === 'string' ? () => messageOrFn : messageOrFn;
    }
  }

  static from(ability) {
    const error = new this('');
    Object.defineProperty(error, 'ability', {
      value: ability
    });
    return error;
  }

  constructor(message, options = {}) {
    super(message);

    this._setMetadata(options);

    this.message = message || defaultErrorMessage(this);
    this._customMessage = null;

    if (typeof Error.captureStackTrace === 'function') {
      this.name = this.constructor.name;
      Error.captureStackTrace(this, this.constructor);
    }
  }

  setMessage(message) {
    this._customMessage = message;
    return this;
  }

  throwUnlessCan(action, subject, field) {
    if (!this.ability) {
      throw new ReferenceError('Cannot throw FordiddenError without respective ability instance');
    }

    const rule = this.ability.relevantRuleFor(action, subject, field);

    if (rule && !rule.inverted) {
      return;
    }

    this._setMetadata({
      action,
      subject,
      field,
      subjectName: this.ability.subjectName(subject)
    });

    const reason = rule ? rule.reason : '';
    this.message = this._customMessage || reason || defaultErrorMessage(this);
    throw this; // eslint-disable-line
  }

  _setMetadata(options) {
    this.subject = options.subject;
    this.subjectName = options.subjectName;
    this.action = options.action;
    this.field = options.field;
  }

}

function wrapArray(value) {
  return Array.isArray(value) ? value : [value];
}
function getSubjectName(subject) {
  if (!subject || typeof subject === 'string') {
    return subject;
  }

  const Type = typeof subject === 'object' ? subject.constructor : subject;
  return Type.modelName || Type.name;
}
function clone(object) {
  return JSON.parse(JSON.stringify(object));
}

const REGEXP_SPECIAL_CHARS = /[-/\\^$+?.()|[\]{}]/g;
const REGEXP_ANY = /\.?\*+\.?/g;
const REGEXP_STARS = /\*+/;
const REGEXP_DOT = /\./g;

function detectRegexpPattern(match, index, string) {
  const quantifier = string[0] === '*' || match[0] === '.' && match[match.length - 1] === '.' ? '+' : '*';
  const matcher = match.indexOf('**') === -1 ? '[^.]' : '.';
  const pattern = match.replace(REGEXP_DOT, '\\$&').replace(REGEXP_STARS, matcher + quantifier);
  return index + match.length === string.length ? `(?:${pattern})?` : pattern;
}

function escapeRegexp(match, index, string) {
  if (match === '.' && (string[index - 1] === '*' || string[index + 1] === '*')) {
    return match;
  }

  return `\\${match}`;
}

function createPattern(fields) {
  const patterns = fields.map(field => field.replace(REGEXP_SPECIAL_CHARS, escapeRegexp).replace(REGEXP_ANY, detectRegexpPattern));
  const pattern = patterns.length > 1 ? `(?:${patterns.join('|')})` : patterns[0];
  return new RegExp(`^${pattern}$`);
}

class Rule {
  constructor(params) {
    this.actions = params.actions || params.action;
    this.subject = params.subject;
    this.fields = !params.fields || params.fields.length === 0 ? undefined : wrapArray(params.fields);
    Object.defineProperty(this, '_fieldsPattern', {
      writable: true
    });
    this.inverted = !!params.inverted;
    this.conditions = params.conditions;
    Object.defineProperty(this, '_matches', {
      writable: true,
      value: this.conditions ? sift(this.conditions) : undefined
    });
    this.reason = params.reason;
  }

  matches(object) {
    if (!this._matches) {
      return true;
    }

    if (typeof object === 'string') {
      return !this.inverted;
    }

    return this._matches(object);
  }

  isRelevantFor(object, field) {
    if (!this.fields) {
      return true;
    }

    if (!field) {
      return !this.inverted;
    }

    return this.matchesField(field);
  }

  matchesField(field) {
    if (typeof this._fieldsPattern === 'undefined') {
      this._fieldsPattern = this.fields.join('').indexOf('*') === -1 ? null : createPattern(this.fields);
    }

    if (this._fieldsPattern === null || field.indexOf('*') !== -1) {
      return this.fields.indexOf(field) !== -1;
    }

    return this._fieldsPattern.test(field);
  }

}

const PRIVATE_FIELD = typeof Symbol !== 'undefined' ? Symbol('private') : `__${Date.now()}`;
const DEFAULT_ALIASES = {
  crud: ['create', 'read', 'update', 'delete']
};

function hasAction(action, actions) {
  return action === actions || Array.isArray(actions) && actions.indexOf(action) !== -1;
}

class Ability {
  static addAlias(alias, actions) {
    if (alias === 'manage' || hasAction('manage', actions)) {
      throw new Error('Cannot add alias for "manage" action because it represents any action');
    }

    if (hasAction(alias, actions)) {
      throw new Error(`Attempt to alias action to itself: ${alias} -> ${actions.toString()}`);
    }

    DEFAULT_ALIASES[alias] = actions;
    return this;
  }

  constructor(rules, options = {}) {
    Object.defineProperty(this, 'subjectName', {
      value: options.subjectName || getSubjectName
    });
    this[PRIVATE_FIELD] = {
      RuleType: options.RuleType || Rule,
      originalRules: rules || [],
      hasPerFieldRules: false,
      indexedRules: Object.create(null),
      mergedRules: Object.create(null),
      events: {},
      aliases: clone(DEFAULT_ALIASES)
    };
    this.update(rules);
  }

  update(rules) {
    if (!Array.isArray(rules)) {
      return this;
    }

    const payload = {
      rules,
      ability: this
    };
    this.emit('update', payload);
    this[PRIVATE_FIELD].originalRules = rules.slice(0);
    this[PRIVATE_FIELD].mergedRules = Object.create(null);
    const index = this.buildIndexFor(rules);

    if (process.env.NODE_ENV !== 'production' && index.isAllInverted && rules.length) {
      // eslint-disable-next-line
      console.warn('[casl]: Ability contains only inverted rules. That means user will not be able to do any actions. This will be changed to Error throw in the next major version');
    }

    this[PRIVATE_FIELD].indexedRules = index.rules;
    this[PRIVATE_FIELD].hasPerFieldRules = index.hasPerFieldRules;
    this.emit('updated', payload);
    return this;
  }

  buildIndexFor(rules) {
    const indexedRules = Object.create(null);
    const {
      RuleType
    } = this[PRIVATE_FIELD];
    let isAllInverted = true;
    let hasPerFieldRules = false;

    for (let i = 0; i < rules.length; i++) {
      const rule = new RuleType(rules[i]);
      const actions = this.expandActions(rule.actions);
      const subjects = wrapArray(rule.subject);
      const priority = rules.length - i - 1;
      isAllInverted = !!(isAllInverted && rule.inverted);

      if (!hasPerFieldRules && rule.fields) {
        hasPerFieldRules = true;
      }

      for (let k = 0; k < subjects.length; k++) {
        const subject = subjects[k];
        indexedRules[subject] = indexedRules[subject] || Object.create(null);

        for (let j = 0; j < actions.length; j++) {
          const action = actions[j];
          indexedRules[subject][action] = indexedRules[subject][action] || Object.create(null);
          indexedRules[subject][action][priority] = rule;
        }
      }
    }

    return {
      isAllInverted,
      hasPerFieldRules,
      rules: indexedRules
    };
  }

  expandActions(rawActions) {
    const {
      aliases
    } = this[PRIVATE_FIELD];
    let actions = wrapArray(rawActions);
    let i = 0;

    while (i < actions.length) {
      const action = actions[i++];

      if (aliases.hasOwnProperty(action)) {
        actions = actions.concat(aliases[action]);
      }
    }

    return actions;
  }

  get rules() {
    return this[PRIVATE_FIELD].originalRules;
  }

  can(action, subject, field) {
    if (field && typeof field !== 'string') {
      // eslint-disable-next-line
      throw new Error('Ability.can expects 3rd parameter to be a string. See https://stalniy.github.io/casl/abilities/2017/07/21/check-abilities.html#checking-fields for details');
    }

    const rule = this.relevantRuleFor(action, subject, field);
    return !!rule && !rule.inverted;
  }

  relevantRuleFor(action, subject, field) {
    const rules = this.rulesFor(action, subject, field);

    for (let i = 0; i < rules.length; i++) {
      if (rules[i].matches(subject)) {
        return rules[i];
      }
    }

    return null;
  }

  possibleRulesFor(action, subject) {
    const subjectName = this.subjectName(subject);
    const {
      mergedRules
    } = this[PRIVATE_FIELD];
    const key = `${subjectName}_${action}`;

    if (!mergedRules[key]) {
      mergedRules[key] = this.mergeRulesFor(action, subjectName);
    }

    return mergedRules[key];
  }

  mergeRulesFor(action, subjectName) {
    const {
      indexedRules
    } = this[PRIVATE_FIELD];
    const mergedRules = [subjectName, 'all'].reduce((rules, subjectType) => {
      const subjectRules = indexedRules[subjectType];

      if (!subjectRules) {
        return rules;
      }

      return Object.assign(rules, subjectRules[action], subjectRules.manage);
    }, []); // TODO: think whether there is a better way to prioritize rules
    // or convert sparse array to regular one

    return mergedRules.filter(Boolean);
  }

  rulesFor(action, subject, field) {
    const rules = this.possibleRulesFor(action, subject);

    if (!this[PRIVATE_FIELD].hasPerFieldRules) {
      return rules;
    }

    return rules.filter(rule => rule.isRelevantFor(subject, field));
  }

  cannot(...args) {
    return !this.can(...args);
  }

  throwUnlessCan(...args) {
    console.warn(`
      Ability.throwUnlessCan is deprecated and will be removed in 4.x version.
      Please use "ForbiddenError.from(ability).throwUnlessCan(...)" instead.
    `.trim());
    ForbiddenError.from(this).throwUnlessCan(...args);
  }

  on(event, handler) {
    const {
      events
    } = this[PRIVATE_FIELD];
    let isAttached = true;

    if (!events[event]) {
      events[event] = [];
    }

    events[event].push(handler);
    return () => {
      if (isAttached) {
        const index = events[event].indexOf(handler);
        events[event].splice(index, 1);
        isAttached = false;
      }
    };
  }

  emit(event, payload) {
    const handlers = this[PRIVATE_FIELD].events[event];

    if (handlers) {
      handlers.slice(0).forEach(handler => handler(payload));
    }
  }

}

function isStringOrNonEmptyArray(value) {
  return ![].concat(value).some(item => typeof item !== 'string');
}

function isObject(value) {
  return value && typeof value === 'object';
}

class RuleBuilder {
  constructor(rule) {
    this.rule = rule;
  }

  because(reason) {
    this.rule.reason = reason;
    return this;
  }

}
class AbilityBuilder {
  static define(params, dsl) {
    const options = typeof params === 'function' ? {} : params;
    const define = params === options ? dsl : params;
    const builder = new this(options);
    const result = define(builder.can.bind(builder), builder.cannot.bind(builder));

    const buildAbility = () => new Ability(builder.rules, options);

    return result && typeof result.then === 'function' ? result.then(buildAbility) : buildAbility();
  }

  static extract() {
    const builder = new this();
    return {
      can: builder.can.bind(builder),
      cannot: builder.cannot.bind(builder),
      rules: builder.rules
    };
  }

  constructor({
    subjectName = getSubjectName
  } = {}) {
    this.rules = [];
    this.subjectName = subjectName;
  }

  can(actions, subject, conditionsOrFields, conditions) {
    if (!isStringOrNonEmptyArray(actions)) {
      throw new TypeError('AbilityBuilder#can expects the first parameter to be an action or array of actions');
    }

    const subjectName = [].concat(subject).map(this.subjectName);

    if (!isStringOrNonEmptyArray(subjectName)) {
      throw new TypeError('AbilityBuilder#can expects the second argument to be a subject name/type or an array of subject names/types');
    }

    const rule = {
      actions,
      subject: subjectName
    };

    if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {
      rule.fields = conditionsOrFields;
    }

    if (isObject(conditions) || !rule.fields && isObject(conditionsOrFields)) {
      rule.conditions = conditions || conditionsOrFields;
    }

    this.rules.push(rule);
    return new RuleBuilder(rule);
  }

  cannot(...args) {
    const builder = this.can(...args);
    builder.rule.inverted = true;
    return builder;
  }

}

export { Ability, AbilityBuilder, ForbiddenError, Rule, RuleBuilder };
